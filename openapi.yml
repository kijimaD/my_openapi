swagger: '2.0'
info:
  description: 'これはサンプルサーバです。'
  version: 1.0.0
  title: Sample Server
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: norimaking777@gmail.com
  license:
    name: GNU General Public License v3.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: example.com
basePath: /v1
servers:
  - url: https://example.dev/v1
    description: 開発
  - url: https://example.stg/v1
    description: ステージング
tags:
  - name: pet
    description: Petの説明
    externalDocs:
      description: Petについてのリンク
      url: 'http://swagger.io'
  - name: user
    description: Userの説明
    externalDocs:
      description: Userについてのリンク
      url: 'http://swagger.io'
schemes:
  - http
  - https
paths:
  /pet:
    get:
      tags:
        - pet
      summary: ペット一覧を表示する
      operationId: listPets
      produces:
        - application/xml
        - application/json
      parameters:
        - name: limit
          in: query
          description: 一度いくつ返却するか (max 100)
          required: false
          schema:
            type: integer
            maximum: 100
            format: int32
      responses:
        '200':
          description: ペットの配列
          headers:
            x-next:
              description: 次のページへのレスポンス
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        # default:
        #   description: unexpected error
        #   content:
        #     application/json:
        #       schema:
        #         $ref: "#/components/schemas/Error"
    post:
      tags:
        - pet
      summary: 店を追加する
      description: '店を追加する'
      operationId: addPet
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
    put:
      tags:
        - pet
      summary: 既に存在するペットを更新する
      description: ''
      operationId: updatePet
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Pet object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /user:
    get:
      tags:
        - user
      summary: "ペット情報API"
      description: "指定されたpetIdの情報を返します"
      produces:
        - application/xml
        - application/json
      parameters:
      - name: "petId"
        in: "path"
        description: "取得したいペットのID"
        required: false
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "成功時のレスポンス"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                format: "int64"
                example: 1
              name:
                type: "string"
                example: "ポチ"
    post:
      tags:
        - user
      summary: ユーザを作成する
      description: ユーザを作成する
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: ユーザオブジェクトを作成する
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: 成功レスポンス
  /user/createWithArray:
    post:
      tags:
        - user
      summary: 受け取った配列でユーザをバッチ作成する
      description: ''
      operationId: createUsersWithArrayInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: ユーザオブジェクトの一覧
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: 成功レスポンス
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Order:
    title: Pet Order
    description: An order for a pets from the pet store
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
        default: false
    xml:
      name: Order
  Category:
    title: Pet category
    description: A category for a pet
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  User:
    title: a User
    description: A User who is purchasing from the pet store
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Tag:
    title: Pet Tag
    description: A tag for a pet
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Pet:
    title: a Pet
    description: A pet for sale in the pet store
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: '#/definitions/Category'
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          name: photoUrl
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
    xml:
      name: Pet
  ApiResponse:
    title: An uploaded response
    description: Describes the result of uploading an image resource
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  #issue: https://github.com/swagger-api/swagger-codegen/issues/7980
  Amount:
    type: object
    description: >
      some description
    properties:
      value:
        format: double
        type: number
        minimum: 0.01
        maximum: 1000000000000000
        description: >
          some description
      currency:
        $ref: '#/definitions/Currency'
    required:
      - value
      - currency
  Currency:
    type: string
    pattern: '^[A-Z]{3,3}$'
    description: >
      some description
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
    Pets:
      type: array
      items:
        $ref: "#/components/schemas/Pet"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
